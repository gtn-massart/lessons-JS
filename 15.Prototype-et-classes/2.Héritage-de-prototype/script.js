/* 
  Par d√©faut, tous les objets h√©ritent du prototype du constructeur Object.

  C'est-√†-dire que la cha√Æne de prototypes se terminera toujours par le prototype Object.

  Mais on peut rajouter autant de maillons qu'on veut √† cette cha√Æne.
  
  Le but de cette approche est de faire h√©riter plusieurs ensembles de m√©thodes et de propri√©t√©s pratiques.

  Par exemple, lorsqu'on construit un tableau, on h√©rite √† la fois du prototype du constructeur Array, mais aussi du constructeur Object.

*/

const arr = ['a', 'b', 'c']
console.log(arr);


/*
    On peut cr√©er une cha√Æne de prototypes soi-m√™me.
*/

function Human(arm, leg){
  this.arm = arm
  this.leg = leg
}
Human.prototype.walk = function(){
  console.log("Walk");  
}
Human.prototype.think = function(){
  console.log("think");  
}
const human1 = new Human(2, 2)
console.log(human1);


function Italian(name) {
  Human.call(this, arm, leg)
  this.name = name
}

Object.setPrototypeOf(Italian.prototype, Human.prototype)

Italian.prototype.lang = "Italian"
Italian.prototype.cookingPasta = function(){
  console.log("üçù");  
}
Italian.prototype.cookingPizza = function(){
  console.log("üçï");  
}
const italian1 = new Italian("Giovanni Madazzo")
console.log(italian1);


console.dir(document.querySelector("h1"));
